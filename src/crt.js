/**
 * Compute the opaque color from a foreground color with alpha channel against at solid color background.
 *
 * We need the ability to compute the same opaque foreground color as the transparent
 * version with a formula.
 *
 * https://graphicdesign.stackexchange.com/questions/113007/how-to-determine-the-equivalent-opaque-rgb-color-for-a-given-partially-transpare
 * https://stackoverflow.com/questions/15898740/how-to-convert-rgba-to-a-transparency-adjusted-hex
 *
 * @param {number[]} rgba
 * @param {number[]} brgb
 * @returns {number[]} the solid color
 */

const opaque = (rgba, brgb) => {
  // Color = Color * alpha + Background * (1 - alpha);
  let ret = new Array(4);
  let alpha = rgba[3];
  ret[3] = 1;

  for (i = 0; i < 3; i++) {
    ret[i] = Math.round(rgba[i] * alpha + brgb[i] * (1 - alpha));
  }

  return ret;
};

/**
 * Compute the opaque color from a foreground with alpha and solid background.
 *
 * @param {string} rgba (#rgba or #rrggbbaa)
 * @param {string} brgb (#rgb or #rrggbb)
 *
 * @returns {string} the solid color
 */

const opaqueRgb = (rgba, brgb) => {
  return rgbaArrayToStr(opaque(rgbaStrToArray(rgba), rgbaStrToArray(brgb)));
};

/**
 * Split a hex rgba-value (#rrggbbaa or #rgba).
 *
 * @param {string} rgba
 * @returns {number[]} rgba array
 */
const rgbaStrToArray = (rgba) => {
  let ret = new Array(4);

  const p1 = () => {
    ret[0] = parseInt(rgba[1] + rgba[1], 16);
    ret[1] = parseInt(rgba[2] + rgba[2], 16);
    ret[2] = parseInt(rgba[3] + rgba[3], 16);
  };

  const p2 = () => {
    ret[0] = parseInt(rgba[1] + rgba[2], 16);
    ret[1] = parseInt(rgba[3] + rgba[4], 16);
    ret[2] = parseInt(rgba[5] + rgba[6], 16);
  };

  if (rgba.length === 4) {
    // #rgb
    p1();
    ret[3] = 1;
  } else if (rgba.length === 5) {
    // #rgba
    p1();
    ret[3] = parseInt(rgba[4] + rgba[4], 16) / 0xff;
  } else if (rgba.length === 7) {
    // #rrggbb
    p2();
    ret[3] = 1;
  } else if (rgba.length === 9) {
    // #rrggbbaa
    p2();
    ret[3] = parseInt(rgba[7] + rgba[8], 16) / 0xff;
  }

  return ret;
};

/**
 * Join rgba-array.
 *
 * @param {number[]} rgba
 * @returns {string} rgba string
 */
const rgbaArrayToStr = (rgba) => {
  return (
    "#" +
    rgba
      .map(function (x, i) {
        let y = "0";
        if (i < 3) {
          y += x.toString(16);
        } else {
          y += Math.round(x * 0xff).toString(16);
        }
        return y.slice(-2);
      })
      .join("")
  );
};

/**
 * Create a CRT Theme programmatically. Serialize into json for inclusion
 * in theme extension.
 *
 * @param {string} name the name of the template
 * @param {string} type of template (dark, light, hc)
 * @param {string} foreground foreground color (#rrggbb)
 * @param {string} background background color (#rrggbb)
 * @param {string[]} opacityLevels array of up to 16 opacities as hex strings "00" to "ff" to override defaults
 * @param {object} template template object with all possible color attributes
 *
 * @returns {any} the resulting template
 */

const crtTemplate = (name, type, foreground, background, opacityLevels) => {
  // Default levels of opacity
  const defaultOpacityLevels = [];
  for (let i = 0; i < 16; i++) {
    let y = "0";
    y += Math.round(0xff - (i * 0xff) / 15).toString(16);
    defaultOpacityLevels[i] = y.slice(-2);
  }

  // Override levels of opacity
  if (opacityLevels) {
    for (let i = 0; i < opacityLevels.length; i++) {
      defaultOpacityLevels[i] = opacityLevels[i];
    }
  }

  const foregroundColors = {};

  for (let i = 0; i < defaultOpacityLevels.length; i++) {
    foregroundColors["t" + i] = foreground + defaultOpacityLevels[i];               // Transparent color
    foregroundColors["s" + i] = opaqueRgb(foregroundColors["t" + i], background);   // Solid color looking like corresponding transparent
  }

  // Basic colors to use everywhere
  let low_transparency_foreground = foregroundColors.t7, //fg_sa = fgc.s7,
    medium_transparency_foreground = foregroundColors.t12,
    high_transparency_foreground = foregroundColors.t14; // fg_sc = fgc.s14;


  /** Map colors for attribute programmatically */
  const color_map = (attribute) => {
    let ret = "default";

    if (attribute.match(/badge.*foreground/gi))
      ret = background;
    else if (attribute.match(/badge.*background/gi))
      ret = foreground;
    else if (attribute.match(/(editor(Error|Info|Warning)\.background)/gi))
      ret = high_transparency_foreground;
    else if (attribute.match(/(merge.*|highlight.*|match|modified|original)background/gi))
      ret = high_transparency_foreground;
    else if (attribute.match(/minimap.*highlight/gi))
      ret = medium_transparency_foreground;
    else if (attribute.match(/(highlight.*|match)foreground/gi))
      ret = low_transparency_foreground;
    else if (attribute.match(/(toggled|active|debugging|line|text|hover|fold|selection|drop)background/gi))
      ret = high_transparency_foreground;
    else if (attribute.match(/shadow/gi))
      ret = high_transparency_foreground;
    else if (attribute.match(/opacity/gi))
      ret = low_transparency_foreground;
    else if (attribute.match(/background/gi))
      ret = background;
    else if (attribute.match(/foreground/gi))
      ret = foreground;
    else if (attribute.match(/border|separator|outline/gi))
      ret = medium_transparency_foreground;

    return ret;
  }


  return {
    "$schema": "vscode://schemas/color-theme",
    name: name,
    type: type,
    colors: {
      "actionBar.toggledBackground": color_map("actionBar.toggledBackground"),
      "activityBar.activeBackground": color_map("activityBar.activeBackground"),
      "activityBar.activeBorder": color_map("activityBar.activeBorder"),
      "activityBar.activeFocusBorder": color_map("activityBar.activeFocusBorder"),
      "activityBar.background": color_map("activityBar.background"),
      "activityBar.border": color_map("activityBar.border"),
      "activityBar.dropBorder": color_map("activityBar.dropBorder"),
      "activityBar.foreground": color_map("activityBar.foreground"),
      "activityBar.inactiveForeground": color_map("activityBar.inactiveForeground"),
      "activityBarBadge.background": color_map("activityBarBadge.background"),
      "activityBarBadge.foreground": color_map("activityBarBadge.foreground"),
      "activityBarTop.activeBackground": color_map("activityBarTop.activeBackground"),
      "activityBarTop.activeBorder": color_map("activityBarTop.activeBorder"),
      "activityBarTop.background": color_map("activityBarTop.background"),
      "activityBarTop.dropBorder": color_map("activityBarTop.dropBorder"),
      "activityBarTop.foreground": color_map("activityBarTop.foreground"),
      "activityBarTop.inactiveForeground": color_map("activityBarTop.inactiveForeground"),
      "activityErrorBadge.background": color_map("activityErrorBadge.background"),
      "activityErrorBadge.foreground": color_map("activityErrorBadge.foreground"),
      "activityWarningBadge.background": color_map("activityWarningBadge.background"),
      "activityWarningBadge.foreground": color_map("activityWarningBadge.foreground"),
      "badge.background": color_map("badge.background"),
      "badge.foreground": color_map("badge.foreground"),
      "banner.background": color_map("banner.background"),
      "banner.foreground": color_map("banner.foreground"),
      "banner.iconForeground": color_map("banner.iconForeground"),
      "breadcrumb.activeSelectionForeground": color_map("breadcrumb.activeSelectionForeground"),
      "breadcrumb.background": color_map("breadcrumb.background"),
      "breadcrumb.focusForeground": color_map("breadcrumb.focusForeground"),
      "breadcrumb.foreground": color_map("breadcrumb.foreground"),
      "breadcrumbPicker.background": color_map("breadcrumbPicker.background"),
      "button.background": color_map("button.background"),
      "button.border": color_map("button.border"),
      "button.foreground": color_map("button.foreground"),
      "button.hoverBackground": color_map("button.hoverBackground"),
      "button.secondaryBackground": color_map("button.secondaryBackground"),
      "button.secondaryForeground": color_map("button.secondaryForeground"),
      "button.secondaryHoverBackground": color_map("button.secondaryHoverBackground"),
      "button.separator": color_map("button.separator"),
      "chart.axis": color_map("chart.axis"),
      "chart.guide": color_map("chart.guide"),
      "chart.line": color_map("chart.line"),
      "charts.blue": color_map("charts.blue"),
      "charts.foreground": color_map("charts.foreground"),
      "charts.green": color_map("charts.green"),
      "charts.lines": color_map("charts.lines"),
      "charts.orange": color_map("charts.orange"),
      "charts.purple": color_map("charts.purple"),
      "charts.red": color_map("charts.red"),
      "charts.yellow": color_map("charts.yellow"),
      "chat.avatarBackground": color_map("chat.avatarBackground"),
      "chat.avatarForeground": color_map("chat.avatarForeground"),
      "chat.editedFileForeground": color_map("chat.editedFileForeground"),
      "chat.requestBackground": color_map("chat.requestBackground"),
      "chat.requestBorder": color_map("chat.requestBorder"),
      "chat.slashCommandBackground": color_map("chat.slashCommandBackground"),
      "chat.slashCommandForeground": color_map("chat.slashCommandForeground"),
      "checkbox.background": color_map("checkbox.background"),
      "checkbox.border": color_map("checkbox.border"),
      "checkbox.foreground": color_map("checkbox.foreground"),
      "checkbox.selectBackground": color_map("checkbox.selectBackground"),
      "checkbox.selectBorder": color_map("checkbox.selectBorder"),
      "commandCenter.activeBackground": color_map("commandCenter.activeBackground"),
      "commandCenter.activeBorder": color_map("commandCenter.activeBorder"),
      "commandCenter.activeForeground": color_map("commandCenter.activeForeground"),
      "commandCenter.background": color_map("commandCenter.background"),
      "commandCenter.border": color_map("commandCenter.border"),
      "commandCenter.debuggingBackground": color_map("commandCenter.debuggingBackground"),
      "commandCenter.foreground": color_map("commandCenter.foreground"),
      "commandCenter.inactiveBorder": color_map("commandCenter.inactiveBorder"),
      "commandCenter.inactiveForeground": color_map("commandCenter.inactiveForeground"),
      "commentsView.resolvedIcon": color_map("commentsView.resolvedIcon"),
      "commentsView.unresolvedIcon": color_map("commentsView.unresolvedIcon"),
      "debugConsole.errorForeground": color_map("debugConsole.errorForeground"),
      "debugConsole.infoForeground": color_map("debugConsole.infoForeground"),
      "debugConsole.sourceForeground": color_map("debugConsole.sourceForeground"),
      "debugConsole.warningForeground": color_map("debugConsole.warningForeground"),
      "debugConsoleInputIcon.foreground": color_map("debugConsoleInputIcon.foreground"),
      "debugExceptionWidget.background": color_map("debugExceptionWidget.background"),
      "debugExceptionWidget.border": color_map("debugExceptionWidget.border"),
      "debugIcon.breakpointCurrentStackframeForeground": color_map("debugIcon.breakpointCurrentStackframeForeground"),
      "debugIcon.breakpointDisabledForeground": color_map("debugIcon.breakpointDisabledForeground"),
      "debugIcon.breakpointForeground": color_map("debugIcon.breakpointForeground"),
      "debugIcon.breakpointStackframeForeground": color_map("debugIcon.breakpointStackframeForeground"),
      "debugIcon.breakpointUnverifiedForeground": color_map("debugIcon.breakpointUnverifiedForeground"),
      "debugIcon.continueForeground": color_map("debugIcon.continueForeground"),
      "debugIcon.disconnectForeground": color_map("debugIcon.disconnectForeground"),
      "debugIcon.pauseForeground": color_map("debugIcon.pauseForeground"),
      "debugIcon.restartForeground": color_map("debugIcon.restartForeground"),
      "debugIcon.startForeground": color_map("debugIcon.startForeground"),
      "debugIcon.stepBackForeground": color_map("debugIcon.stepBackForeground"),
      "debugIcon.stepIntoForeground": color_map("debugIcon.stepIntoForeground"),
      "debugIcon.stepOutForeground": color_map("debugIcon.stepOutForeground"),
      "debugIcon.stepOverForeground": color_map("debugIcon.stepOverForeground"),
      "debugIcon.stopForeground": color_map("debugIcon.stopForeground"),
      "debugTokenExpression.boolean": color_map("debugTokenExpression.boolean"),
      "debugTokenExpression.error": color_map("debugTokenExpression.error"),
      "debugTokenExpression.name": color_map("debugTokenExpression.name"),
      "debugTokenExpression.number": color_map("debugTokenExpression.number"),
      "debugTokenExpression.string": color_map("debugTokenExpression.string"),
      "debugTokenExpression.type": color_map("debugTokenExpression.type"),
      "debugTokenExpression.value": color_map("debugTokenExpression.value"),
      "debugToolBar.background": color_map("debugToolBar.background"),
      "debugToolBar.border": color_map("debugToolBar.border"),
      "debugView.exceptionLabelBackground": color_map("debugView.exceptionLabelBackground"),
      "debugView.exceptionLabelForeground": color_map("debugView.exceptionLabelForeground"),
      "debugView.stateLabelBackground": color_map("debugView.stateLabelBackground"),
      "debugView.stateLabelForeground": color_map("debugView.stateLabelForeground"),
      "debugView.valueChangedHighlight": color_map("debugView.valueChangedHighlight"),
      "descriptionForeground": color_map("descriptionForeground"),
      "diffEditor.border": color_map("diffEditor.border"),
      "diffEditor.diagonalFill": color_map("diffEditor.diagonalFill"),
      "diffEditor.insertedLineBackground": color_map("diffEditor.insertedLineBackground"),
      "diffEditor.insertedTextBackground": color_map("diffEditor.insertedTextBackground"),
      "diffEditor.insertedTextBorder": color_map("diffEditor.insertedTextBorder"),
      "diffEditor.move.border": color_map("diffEditor.move.border"),
      "diffEditor.moveActive.border": color_map("diffEditor.moveActive.border"),
      "diffEditor.removedLineBackground": color_map("diffEditor.removedLineBackground"),
      "diffEditor.removedTextBackground": color_map("diffEditor.removedTextBackground"),
      "diffEditor.removedTextBorder": color_map("diffEditor.removedTextBorder"),
      "diffEditor.unchangedCodeBackground": color_map("diffEditor.unchangedCodeBackground"),
      "diffEditor.unchangedRegionBackground": color_map("diffEditor.unchangedRegionBackground"),
      "diffEditor.unchangedRegionForeground": color_map("diffEditor.unchangedRegionForeground"),
      "diffEditor.unchangedRegionShadow": color_map("diffEditor.unchangedRegionShadow"),
      "diffEditorGutter.insertedLineBackground": color_map("diffEditorGutter.insertedLineBackground"),
      "diffEditorGutter.removedLineBackground": color_map("diffEditorGutter.removedLineBackground"),
      "diffEditorOverview.insertedForeground": color_map("diffEditorOverview.insertedForeground"),
      "diffEditorOverview.removedForeground": color_map("diffEditorOverview.removedForeground"),
      "disabledForeground": color_map("disabledForeground"),
      "dropdown.background": color_map("dropdown.background"),
      "dropdown.border": color_map("dropdown.border"),
      "dropdown.foreground": color_map("dropdown.foreground"),
      "dropdown.listBackground": color_map("dropdown.listBackground"),
      "editor.background": color_map("editor.background"),
      "editor.compositionBorder": color_map("editor.compositionBorder"),
      "editor.findMatchBackground": color_map("editor.findMatchBackground"),
      "editor.findMatchBorder": color_map("editor.findMatchBorder"),
      "editor.findMatchForeground": color_map("editor.findMatchForeground"),
      "editor.findMatchHighlightBackground": color_map("editor.findMatchHighlightBackground"),
      "editor.findMatchHighlightBorder": color_map("editor.findMatchHighlightBorder"),
      "editor.findMatchHighlightForeground": color_map("editor.findMatchHighlightForeground"),
      "editor.findRangeHighlightBackground": color_map("editor.findRangeHighlightBackground"),
      "editor.findRangeHighlightBorder": color_map("editor.findRangeHighlightBorder"),
      "editor.focusedStackFrameHighlightBackground": color_map("editor.focusedStackFrameHighlightBackground"),
      "editor.foldBackground": color_map("editor.foldBackground"),
      "editor.foldPlaceholderForeground": color_map("editor.foldPlaceholderForeground"),
      "editor.foreground": color_map("editor.foreground"),
      "editor.hoverHighlightBackground": color_map("editor.hoverHighlightBackground"),
      "editor.inactiveSelectionBackground": color_map("editor.inactiveSelectionBackground"),
      "editor.inlineValuesBackground": color_map("editor.inlineValuesBackground"),
      "editor.inlineValuesForeground": color_map("editor.inlineValuesForeground"),
      "editor.lineHighlightBackground": color_map("editor.lineHighlightBackground"),
      "editor.lineHighlightBorder": color_map("editor.lineHighlightBorder"),
      "editor.linkedEditingBackground": color_map("editor.linkedEditingBackground"),
      "editor.placeholder.foreground": color_map("editor.placeholder.foreground"),
      "editor.rangeHighlightBackground": color_map("editor.rangeHighlightBackground"),
      "editor.rangeHighlightBorder": color_map("editor.rangeHighlightBorder"),
      "editor.selectionBackground": color_map("editor.selectionBackground"),
      "editor.selectionForeground": color_map("editor.selectionForeground"),
      "editor.selectionHighlightBackground": color_map("editor.selectionHighlightBackground"),
      "editor.selectionHighlightBorder": color_map("editor.selectionHighlightBorder"),
      "editor.snippetFinalTabstopHighlightBackground": color_map("editor.snippetFinalTabstopHighlightBackground"),
      "editor.snippetFinalTabstopHighlightBorder": color_map("editor.snippetFinalTabstopHighlightBorder"),
      "editor.snippetTabstopHighlightBackground": color_map("editor.snippetTabstopHighlightBackground"),
      "editor.snippetTabstopHighlightBorder": color_map("editor.snippetTabstopHighlightBorder"),
      "editor.stackFrameHighlightBackground": color_map("editor.stackFrameHighlightBackground"),
      "editor.symbolHighlightBackground": color_map("editor.symbolHighlightBackground"),
      "editor.symbolHighlightBorder": color_map("editor.symbolHighlightBorder"),
      "editor.wordHighlightBackground": color_map("editor.wordHighlightBackground"),
      "editor.wordHighlightBorder": color_map("editor.wordHighlightBorder"),
      "editor.wordHighlightStrongBackground": color_map("editor.wordHighlightStrongBackground"),
      "editor.wordHighlightStrongBorder": color_map("editor.wordHighlightStrongBorder"),
      "editor.wordHighlightTextBackground": color_map("editor.wordHighlightTextBackground"),
      "editor.wordHighlightTextBorder": color_map("editor.wordHighlightTextBorder"),
      "editorActionList.background": color_map("editorActionList.background"),
      "editorActionList.focusBackground": color_map("editorActionList.focusBackground"),
      "editorActionList.focusForeground": color_map("editorActionList.focusForeground"),
      "editorActionList.foreground": color_map("editorActionList.foreground"),
      "editorActiveLineNumber.foreground": color_map("editorActiveLineNumber.foreground"),
      "editorBracketHighlight.foreground1": color_map("editorBracketHighlight.foreground1"),
      "editorBracketHighlight.foreground2": color_map("editorBracketHighlight.foreground2"),
      "editorBracketHighlight.foreground3": color_map("editorBracketHighlight.foreground3"),
      "editorBracketHighlight.foreground4": color_map("editorBracketHighlight.foreground4"),
      "editorBracketHighlight.foreground5": color_map("editorBracketHighlight.foreground5"),
      "editorBracketHighlight.foreground6": color_map("editorBracketHighlight.foreground6"),
      "editorBracketHighlight.unexpectedBracket.foreground": color_map("editorBracketHighlight.unexpectedBracket.foreground"),
      "editorBracketMatch.background": color_map("editorBracketMatch.background"),
      "editorBracketMatch.border": color_map("editorBracketMatch.border"),
      "editorBracketPairGuide.activeBackground1": color_map("editorBracketPairGuide.activeBackground1"),
      "editorBracketPairGuide.activeBackground2": color_map("editorBracketPairGuide.activeBackground2"),
      "editorBracketPairGuide.activeBackground3": color_map("editorBracketPairGuide.activeBackground3"),
      "editorBracketPairGuide.activeBackground4": color_map("editorBracketPairGuide.activeBackground4"),
      "editorBracketPairGuide.activeBackground5": color_map("editorBracketPairGuide.activeBackground5"),
      "editorBracketPairGuide.activeBackground6": color_map("editorBracketPairGuide.activeBackground6"),
      "editorBracketPairGuide.background1": color_map("editorBracketPairGuide.background1"),
      "editorBracketPairGuide.background2": color_map("editorBracketPairGuide.background2"),
      "editorBracketPairGuide.background3": color_map("editorBracketPairGuide.background3"),
      "editorBracketPairGuide.background4": color_map("editorBracketPairGuide.background4"),
      "editorBracketPairGuide.background5": color_map("editorBracketPairGuide.background5"),
      "editorBracketPairGuide.background6": color_map("editorBracketPairGuide.background6"),
      "editorCodeLens.foreground": color_map("editorCodeLens.foreground"),
      "editorCommentsWidget.rangeActiveBackground": color_map("editorCommentsWidget.rangeActiveBackground"),
      "editorCommentsWidget.rangeBackground": color_map("editorCommentsWidget.rangeBackground"),
      "editorCommentsWidget.replyInputBackground": color_map("editorCommentsWidget.replyInputBackground"),
      "editorCommentsWidget.resolvedBorder": color_map("editorCommentsWidget.resolvedBorder"),
      "editorCommentsWidget.unresolvedBorder": color_map("editorCommentsWidget.unresolvedBorder"),
      "editorCursor.background": color_map("editorCursor.background"),
      "editorCursor.foreground": color_map("editorCursor.foreground"),
      "editorError.background": color_map("editorError.background"),
      "editorError.border": color_map("editorError.border"),
      "editorError.foreground": color_map("editorError.foreground"),
      "editorGhostText.background": color_map("editorGhostText.background"),
      "editorGhostText.border": color_map("editorGhostText.border"),
      "editorGhostText.foreground": color_map("editorGhostText.foreground"),
      "editorGroup.border": color_map("editorGroup.border"),
      "editorGroup.dropBackground": color_map("editorGroup.dropBackground"),
      "editorGroup.dropIntoPromptBackground": color_map("editorGroup.dropIntoPromptBackground"),
      "editorGroup.dropIntoPromptBorder": color_map("editorGroup.dropIntoPromptBorder"),
      "editorGroup.dropIntoPromptForeground": color_map("editorGroup.dropIntoPromptForeground"),
      "editorGroup.emptyBackground": color_map("editorGroup.emptyBackground"),
      "editorGroup.focusedEmptyBorder": color_map("editorGroup.focusedEmptyBorder"),
      "editorGroupHeader.border": color_map("editorGroupHeader.border"),
      "editorGroupHeader.noTabsBackground": color_map("editorGroupHeader.noTabsBackground"),
      "editorGroupHeader.tabsBackground": color_map("editorGroupHeader.tabsBackground"),
      "editorGroupHeader.tabsBorder": color_map("editorGroupHeader.tabsBorder"),
      "editorGutter.addedBackground": color_map("editorGutter.addedBackground"),
      "editorGutter.background": color_map("editorGutter.background"),
      "editorGutter.commentGlyphForeground": color_map("editorGutter.commentGlyphForeground"),
      "editorGutter.commentRangeForeground": color_map("editorGutter.commentRangeForeground"),
      "editorGutter.commentUnresolvedGlyphForeground": color_map("editorGutter.commentUnresolvedGlyphForeground"),
      "editorGutter.deletedBackground": color_map("editorGutter.deletedBackground"),
      "editorGutter.foldingControlForeground": color_map("editorGutter.foldingControlForeground"),
      "editorGutter.modifiedBackground": color_map("editorGutter.modifiedBackground"),
      "editorHint.border": color_map("editorHint.border"),
      "editorHint.foreground": color_map("editorHint.foreground"),
      "editorHoverWidget.background": color_map("editorHoverWidget.background"),
      "editorHoverWidget.border": color_map("editorHoverWidget.border"),
      "editorHoverWidget.foreground": color_map("editorHoverWidget.foreground"),
      "editorHoverWidget.highlightForeground": color_map("editorHoverWidget.highlightForeground"),
      "editorHoverWidget.statusBarBackground": color_map("editorHoverWidget.statusBarBackground"),
      "editorIndentGuide.activeBackground": color_map("editorIndentGuide.activeBackground"), // DEPRECATED
      "editorIndentGuide.activeBackground1": color_map("editorIndentGuide.activeBackground1"),
      "editorIndentGuide.activeBackground2": color_map("editorIndentGuide.activeBackground2"),
      "editorIndentGuide.activeBackground3": color_map("editorIndentGuide.activeBackground3"),
      "editorIndentGuide.activeBackground4": color_map("editorIndentGuide.activeBackground4"),
      "editorIndentGuide.activeBackground5": color_map("editorIndentGuide.activeBackground5"),
      "editorIndentGuide.activeBackground6": color_map("editorIndentGuide.activeBackground6"),
      "editorIndentGuide.background": color_map("editorIndentGuide.background"),
      "editorIndentGuide.background1": color_map("editorIndentGuide.background1"),
      "editorIndentGuide.background2": color_map("editorIndentGuide.background2"),
      "editorIndentGuide.background3": color_map("editorIndentGuide.background3"),
      "editorIndentGuide.background4": color_map("editorIndentGuide.background4"),
      "editorIndentGuide.background5": color_map("editorIndentGuide.background5"),
      "editorIndentGuide.background6": color_map("editorIndentGuide.background6"),
      "editorInfo.background": color_map("editorInfo.background"),
      "editorInfo.border": color_map("editorInfo.border"),
      "editorInfo.foreground": color_map("editorInfo.foreground"),
      "editorInlayHint.background": color_map("editorInlayHint.background"),
      "editorInlayHint.foreground": color_map("editorInlayHint.foreground"),
      "editorInlayHint.parameterBackground": color_map("editorInlayHint.parameterBackground"),
      "editorInlayHint.parameterForeground": color_map("editorInlayHint.parameterForeground"),
      "editorInlayHint.typeBackground": color_map("editorInlayHint.typeBackground"),
      "editorInlayHint.typeForeground": color_map("editorInlayHint.typeForeground"),
      "editorLightBulb.foreground": color_map("editorLightBulb.foreground"),
      "editorLightBulbAi.foreground": color_map("editorLightBulbAi.foreground"),
      "editorLightBulbAutoFix.foreground": color_map("editorLightBulbAutoFix.foreground"),
      "editorLineNumber.activeForeground": color_map("editorLineNumber.activeForeground"),
      "editorLineNumber.dimmedForeground": color_map("editorLineNumber.dimmedForeground"),
      "editorLineNumber.foreground": color_map("editorLineNumber.foreground"),
      "editorLink.activeForeground": color_map("editorLink.activeForeground"),
      "editorMarkerNavigation.background": color_map("editorMarkerNavigation.background"),
      "editorMarkerNavigationError.background": color_map("editorMarkerNavigationError.background"),
      "editorMarkerNavigationError.headerBackground": color_map("editorMarkerNavigationError.headerBackground"),
      "editorMarkerNavigationInfo.background": color_map("editorMarkerNavigationInfo.background"),
      "editorMarkerNavigationInfo.headerBackground": color_map("editorMarkerNavigationInfo.headerBackground"),
      "editorMarkerNavigationWarning.background": color_map("editorMarkerNavigationWarning.background"),
      "editorMarkerNavigationWarning.headerBackground": color_map("editorMarkerNavigationWarning.headerBackground"),
      "editorMinimap.inlineChatInserted": color_map("editorMinimap.inlineChatInserted"),
      "editorMultiCursor.primary.background": color_map("editorMultiCursor.primary.background"),
      "editorMultiCursor.primary.foreground": color_map("editorMultiCursor.primary.foreground"),
      "editorMultiCursor.secondary.background": color_map("editorMultiCursor.secondary.background"),
      "editorMultiCursor.secondary.foreground": color_map("editorMultiCursor.secondary.foreground"),
      "editorOverviewRuler.addedForeground": color_map("editorOverviewRuler.addedForeground"),
      "editorOverviewRuler.background": color_map("editorOverviewRuler.background"),
      "editorOverviewRuler.border": color_map("editorOverviewRuler.border"),
      "editorOverviewRuler.bracketMatchForeground": color_map("editorOverviewRuler.bracketMatchForeground"),
      "editorOverviewRuler.commentForeground": color_map("editorOverviewRuler.commentForeground"),
      "editorOverviewRuler.commentUnresolvedForeground": color_map("editorOverviewRuler.commentUnresolvedForeground"),
      "editorOverviewRuler.commonContentForeground": color_map("editorOverviewRuler.commonContentForeground"),
      "editorOverviewRuler.currentContentForeground": color_map("editorOverviewRuler.currentContentForeground"),
      "editorOverviewRuler.deletedForeground": color_map("editorOverviewRuler.deletedForeground"),
      "editorOverviewRuler.errorForeground": color_map("editorOverviewRuler.errorForeground"),
      "editorOverviewRuler.findMatchForeground": color_map("editorOverviewRuler.findMatchForeground"),
      "editorOverviewRuler.incomingContentForeground": color_map("editorOverviewRuler.incomingContentForeground"),
      "editorOverviewRuler.infoForeground": color_map("editorOverviewRuler.infoForeground"),
      "editorOverviewRuler.inlineChatInserted": color_map("editorOverviewRuler.inlineChatInserted"),
      "editorOverviewRuler.inlineChatRemoved": color_map("editorOverviewRuler.inlineChatRemoved"),
      "editorOverviewRuler.modifiedForeground": color_map("editorOverviewRuler.modifiedForeground"),
      "editorOverviewRuler.rangeHighlightForeground": color_map("editorOverviewRuler.rangeHighlightForeground"),
      "editorOverviewRuler.selectionHighlightForeground": color_map("editorOverviewRuler.selectionHighlightForeground"),
      "editorOverviewRuler.warningForeground": color_map("editorOverviewRuler.warningForeground"),
      "editorOverviewRuler.wordHighlightForeground": color_map("editorOverviewRuler.wordHighlightForeground"),
      "editorOverviewRuler.wordHighlightStrongForeground": color_map("editorOverviewRuler.wordHighlightStrongForeground"),
      "editorOverviewRuler.wordHighlightTextForeground": color_map("editorOverviewRuler.wordHighlightTextForeground"),
      "editorPane.background": color_map("editorPane.background"),
      "editorRuler.foreground": color_map("editorRuler.foreground"),
      "editorStickyScroll.background": color_map("editorStickyScroll.background"),
      "editorStickyScroll.border": color_map("editorStickyScroll.border"),
      "editorStickyScroll.shadow": color_map("editorStickyScroll.shadow"),
      "editorStickyScrollHover.background": color_map("editorStickyScrollHover.background"),
      "editorSuggestWidget.background": color_map("editorSuggestWidget.background"),
      "editorSuggestWidget.border": color_map("editorSuggestWidget.border"),
      "editorSuggestWidget.focusHighlightForeground": color_map("editorSuggestWidget.focusHighlightForeground"),
      "editorSuggestWidget.foreground": color_map("editorSuggestWidget.foreground"),
      "editorSuggestWidget.highlightForeground": color_map("editorSuggestWidget.highlightForeground"),
      "editorSuggestWidget.selectedBackground": color_map("editorSuggestWidget.selectedBackground"),
      "editorSuggestWidget.selectedForeground": color_map("editorSuggestWidget.selectedForeground"),
      "editorSuggestWidget.selectedIconForeground": color_map("editorSuggestWidget.selectedIconForeground"),
      "editorSuggestWidgetStatus.foreground": color_map("editorSuggestWidgetStatus.foreground"),
      "editorUnicodeHighlight.background": color_map("editorUnicodeHighlight.background"),
      "editorUnicodeHighlight.border": color_map("editorUnicodeHighlight.border"),
      "editorUnnecessaryCode.border": color_map("editorUnnecessaryCode.border"),
      "editorUnnecessaryCode.opacity": color_map("editorUnnecessaryCode.opacity"),
      "editorWarning.background": color_map("editorWarning.background"),
      "editorWarning.border": color_map("editorWarning.border"),
      "editorWarning.foreground": color_map("editorWarning.foreground"),
      "editorWatermark.foreground": color_map("editorWatermark.foreground"),
      "editorWhitespace.foreground": color_map("editorWhitespace.foreground"),
      "editorWidget.background": color_map("editorWidget.background"),
      "editorWidget.border": color_map("editorWidget.border"),
      "editorWidget.foreground": color_map("editorWidget.foreground"),
      "editorWidget.resizeBorder": color_map("editorWidget.resizeBorder"),
      "errorForeground": color_map("errorForeground"),
      "extensionBadge.remoteBackground": color_map("extensionBadge.remoteBackground"),
      "extensionBadge.remoteForeground": color_map("extensionBadge.remoteForeground"),
      "extensionButton.background": color_map("extensionButton.background"),
      "extensionButton.foreground": color_map("extensionButton.foreground"),
      "extensionButton.hoverBackground": color_map("extensionButton.hoverBackground"),
      "extensionButton.prominentBackground": color_map("extensionButton.prominentBackground"),
      "extensionButton.prominentForeground": color_map("extensionButton.prominentForeground"),
      "extensionButton.prominentHoverBackground": color_map("extensionButton.prominentHoverBackground"),
      "extensionButton.separator": color_map("extensionButton.separator"),
      "extensionIcon.preReleaseForeground": color_map("extensionIcon.preReleaseForeground"),
      "extensionIcon.sponsorForeground": color_map("extensionIcon.sponsorForeground"),
      "extensionIcon.starForeground": color_map("extensionIcon.starForeground"),
      "extensionIcon.verifiedForeground": color_map("extensionIcon.verifiedForeground"),
      "focusBorder": color_map("focusBorder"),
      "foreground": color_map("foreground"),
      "git.blame.editorDecorationForeground": color_map("git.blame.editorDecorationForeground"),
      "gitDecoration.addedResourceForeground": color_map("gitDecoration.addedResourceForeground"),
      "gitDecoration.conflictingResourceForeground": color_map("gitDecoration.conflictingResourceForeground"),
      "gitDecoration.deletedResourceForeground": color_map("gitDecoration.deletedResourceForeground"),
      "gitDecoration.ignoredResourceForeground": color_map("gitDecoration.ignoredResourceForeground"),
      "gitDecoration.modifiedResourceForeground": color_map("gitDecoration.modifiedResourceForeground"),
      "gitDecoration.renamedResourceForeground": color_map("gitDecoration.renamedResourceForeground"),
      "gitDecoration.stageDeletedResourceForeground": color_map("gitDecoration.stageDeletedResourceForeground"),
      "gitDecoration.stageModifiedResourceForeground": color_map("gitDecoration.stageModifiedResourceForeground"),
      "gitDecoration.submoduleResourceForeground": color_map("gitDecoration.submoduleResourceForeground"),
      "gitDecoration.untrackedResourceForeground": color_map("gitDecoration.untrackedResourceForeground"),
      "icon.foreground": color_map("icon.foreground"),
      "inlineChat.background": color_map("inlineChat.background"),
      "inlineChat.border": color_map("inlineChat.border"),
      "inlineChat.foreground": color_map("inlineChat.foreground"),
      "inlineChat.shadow": color_map("inlineChat.shadow"),
      "inlineChatDiff.inserted": color_map("inlineChatDiff.inserted"),
      "inlineChatDiff.removed": color_map("inlineChatDiff.removed"),
      "inlineChatInput.background": color_map("inlineChatInput.background"),
      "inlineChatInput.border": color_map("inlineChatInput.border"),
      "inlineChatInput.focusBorder": color_map("inlineChatInput.focusBorder"),
      "inlineChatInput.placeholderForeground": color_map("inlineChatInput.placeholderForeground"),
      "inlineEdit.gutterIndicator.background": color_map("inlineEdit.gutterIndicator.background"),
      "inlineEdit.gutterIndicator.primaryBackground": color_map("inlineEdit.gutterIndicator.primaryBackground"),
      "inlineEdit.gutterIndicator.primaryForeground": color_map("inlineEdit.gutterIndicator.primaryForeground"),
      "inlineEdit.gutterIndicator.secondaryBackground": color_map("inlineEdit.gutterIndicator.secondaryBackground"),
      "inlineEdit.gutterIndicator.secondaryForeground": color_map("inlineEdit.gutterIndicator.secondaryForeground"),
      "inlineEdit.gutterIndicator.successfulBackground": color_map("inlineEdit.gutterIndicator.successfulBackground"),
      "inlineEdit.gutterIndicator.successfulForeground": color_map("inlineEdit.gutterIndicator.successfulForeground"),
      "inlineEdit.indicator.background": color_map("inlineEdit.indicator.background"),
      "inlineEdit.indicator.border": color_map("inlineEdit.indicator.border"),
      "inlineEdit.indicator.foreground": color_map("inlineEdit.indicator.foreground"),
      "inlineEdit.modifiedBackground": color_map("inlineEdit.modifiedBackground"),
      "inlineEdit.modifiedBorder": color_map("inlineEdit.modifiedBorder"),
      "inlineEdit.modifiedChangedLineBackground": color_map("inlineEdit.modifiedChangedLineBackground"),
      "inlineEdit.modifiedChangedTextBackground": color_map("inlineEdit.modifiedChangedTextBackground"),
      "inlineEdit.originalBackground": color_map("inlineEdit.originalBackground"),
      "inlineEdit.originalBorder": color_map("inlineEdit.originalBorder"),
      "inlineEdit.originalChangedLineBackground": color_map("inlineEdit.originalChangedLineBackground"),
      "inlineEdit.originalChangedTextBackground": color_map("inlineEdit.originalChangedTextBackground"),
      "inlineEdit.wordReplacementView.background": color_map("inlineEdit.wordReplacementView.background"),
      "input.background": color_map("input.background"),
      "input.border": color_map("input.border"),
      "input.foreground": color_map("input.foreground"),
      "input.placeholderForeground": color_map("input.placeholderForeground"),
      "inputOption.activeBackground": color_map("inputOption.activeBackground"),
      "inputOption.activeBorder": color_map("inputOption.activeBorder"),
      "inputOption.activeForeground": color_map("inputOption.activeForeground"),
      "inputOption.hoverBackground": color_map("inputOption.hoverBackground"),
      "inputValidation.errorBackground": color_map("inputValidation.errorBackground"),
      "inputValidation.errorBorder": color_map("inputValidation.errorBorder"),
      "inputValidation.errorForeground": color_map("inputValidation.errorForeground"),
      "inputValidation.infoBackground": color_map("inputValidation.infoBackground"),
      "inputValidation.infoBorder": color_map("inputValidation.infoBorder"),
      "inputValidation.infoForeground": color_map("inputValidation.infoForeground"),
      "inputValidation.warningBackground": color_map("inputValidation.warningBackground"),
      "inputValidation.warningBorder": color_map("inputValidation.warningBorder"),
      "inputValidation.warningForeground": color_map("inputValidation.warningForeground"),
      "interactive.activeCodeBorder": color_map("interactive.activeCodeBorder"),
      "interactive.inactiveCodeBorder": color_map("interactive.inactiveCodeBorder"),
      "issues.closed": color_map("issues.closed"),
      "issues.newIssueDecoration": color_map("issues.newIssueDecoration"),
      "issues.open": color_map("issues.open"),
      "keybindingLabel.background": color_map("keybindingLabel.background"),
      "keybindingLabel.border": color_map("keybindingLabel.border"),
      "keybindingLabel.bottomBorder": color_map("keybindingLabel.bottomBorder"),
      "keybindingLabel.foreground": color_map("keybindingLabel.foreground"),
      "keybindingTable.headerBackground": color_map("keybindingTable.headerBackground"),
      "keybindingTable.rowsBackground": color_map("keybindingTable.rowsBackground"),
      "list.activeSelectionBackground": color_map("list.activeSelectionBackground"),
      "list.activeSelectionForeground": color_map("list.activeSelectionForeground"),
      "list.activeSelectionIconForeground": color_map("list.activeSelectionIconForeground"),
      "list.deemphasizedForeground": color_map("list.deemphasizedForeground"),
      "list.dropBackground": color_map("list.dropBackground"),
      "list.dropBetweenBackground": color_map("list.dropBetweenBackground"),
      "list.errorForeground": color_map("list.errorForeground"),
      "list.filterMatchBackground": color_map("list.filterMatchBackground"),
      "list.filterMatchBorder": color_map("list.filterMatchBorder"),
      "list.focusAndSelectionOutline": color_map("list.focusAndSelectionOutline"),
      "list.focusBackground": color_map("list.focusBackground"),
      "list.focusForeground": color_map("list.focusForeground"),
      "list.focusHighlightForeground": color_map("list.focusHighlightForeground"),
      "list.focusOutline": color_map("list.focusOutline"),
      "list.highlightForeground": color_map("list.highlightForeground"),
      "list.hoverBackground": color_map("list.hoverBackground"),
      "list.hoverForeground": color_map("list.hoverForeground"),
      "list.inactiveFocusBackground": color_map("list.inactiveFocusBackground"),
      "list.inactiveFocusOutline": color_map("list.inactiveFocusOutline"),
      "list.inactiveSelectionBackground": color_map("list.inactiveSelectionBackground"),
      "list.inactiveSelectionForeground": color_map("list.inactiveSelectionForeground"),
      "list.inactiveSelectionIconForeground": color_map("list.inactiveSelectionIconForeground"),
      "list.invalidItemForeground": color_map("list.invalidItemForeground"),
      "list.warningForeground": color_map("list.warningForeground"),
      "listFilterWidget.background": color_map("listFilterWidget.background"),
      "listFilterWidget.noMatchesOutline": color_map("listFilterWidget.noMatchesOutline"),
      "listFilterWidget.outline": color_map("listFilterWidget.outline"),
      "listFilterWidget.shadow": color_map("listFilterWidget.shadow"),
      "menu.background": color_map("menu.background"),
      "menu.border": color_map("menu.border"),
      "menu.foreground": color_map("menu.foreground"),
      "menu.selectionBackground": color_map("menu.selectionBackground"),
      "menu.selectionBorder": color_map("menu.selectionBorder"),
      "menu.selectionForeground": color_map("menu.selectionForeground"),
      "menu.separatorBackground": color_map("menu.separatorBackground"),
      "menubar.selectionBackground": color_map("menubar.selectionBackground"),
      "menubar.selectionBorder": color_map("menubar.selectionBorder"),
      "menubar.selectionForeground": color_map("menubar.selectionForeground"),
      "merge.border": color_map("merge.border"),
      "merge.commonContentBackground": color_map("merge.commonContentBackground"),
      "merge.commonHeaderBackground": color_map("merge.commonHeaderBackground"),
      "merge.currentContentBackground": color_map("merge.currentContentBackground"),
      "merge.currentHeaderBackground": color_map("merge.currentHeaderBackground"),
      "merge.incomingContentBackground": color_map("merge.incomingContentBackground"),
      "merge.incomingHeaderBackground": color_map("merge.incomingHeaderBackground"),
      "mergeEditor.change.background": color_map("mergeEditor.change.background"),
      "mergeEditor.change.word.background": color_map("mergeEditor.change.word.background"),
      "mergeEditor.changeBase.background": color_map("mergeEditor.changeBase.background"),
      "mergeEditor.changeBase.word.background": color_map("mergeEditor.changeBase.word.background"),
      "mergeEditor.conflict.handled.minimapOverViewRuler": color_map("mergeEditor.conflict.handled.minimapOverViewRuler"),
      "mergeEditor.conflict.handledFocused.border": color_map("mergeEditor.conflict.handledFocused.border"),
      "mergeEditor.conflict.handledUnfocused.border": color_map("mergeEditor.conflict.handledUnfocused.border"),
      "mergeEditor.conflict.input1.background": color_map("mergeEditor.conflict.input1.background"),
      "mergeEditor.conflict.input2.background": color_map("mergeEditor.conflict.input2.background"),
      "mergeEditor.conflict.unhandled.minimapOverViewRuler": color_map("mergeEditor.conflict.unhandled.minimapOverViewRuler"),
      "mergeEditor.conflict.unhandledFocused.border": color_map("mergeEditor.conflict.unhandledFocused.border"),
      "mergeEditor.conflict.unhandledUnfocused.border": color_map("mergeEditor.conflict.unhandledUnfocused.border"),
      "mergeEditor.conflictingLines.background": color_map("mergeEditor.conflictingLines.background"),
      "minimap.background": color_map("minimap.background"),
      "minimap.errorHighlight": color_map("minimap.errorHighlight"),
      "minimap.findMatchHighlight": color_map("minimap.findMatchHighlight"),
      "minimap.foregroundOpacity": color_map("minimap.foregroundOpacity"),
      "minimap.infoHighlight": color_map("minimap.infoHighlight"),
      "minimap.selectionHighlight": color_map("minimap.selectionHighlight"),
      "minimap.selectionOccurrenceHighlight": color_map("minimap.selectionOccurrenceHighlight"),
      "minimap.warningHighlight": color_map("minimap.warningHighlight"),
      "minimapGutter.addedBackground": color_map("minimapGutter.addedBackground"),
      "minimapGutter.deletedBackground": color_map("minimapGutter.deletedBackground"),
      "minimapGutter.modifiedBackground": color_map("minimapGutter.modifiedBackground"),
      "minimapSlider.activeBackground": color_map("minimapSlider.activeBackground"),
      "minimapSlider.background": color_map("minimapSlider.background"),
      "minimapSlider.hoverBackground": color_map("minimapSlider.hoverBackground"),
      "multiDiffEditor.background": color_map("multiDiffEditor.background"),
      "multiDiffEditor.border": color_map("multiDiffEditor.border"),
      "multiDiffEditor.headerBackground": color_map("multiDiffEditor.headerBackground"),
      "notebook.cellBorderColor": color_map("notebook.cellBorderColor"),
      "notebook.cellEditorBackground": color_map("notebook.cellEditorBackground"),
      "notebook.cellHoverBackground": color_map("notebook.cellHoverBackground"),
      "notebook.cellInsertionIndicator": color_map("notebook.cellInsertionIndicator"),
      "notebook.cellStatusBarItemHoverBackground": color_map("notebook.cellStatusBarItemHoverBackground"),
      "notebook.cellToolbarSeparator": color_map("notebook.cellToolbarSeparator"),
      "notebook.editorBackground": color_map("notebook.editorBackground"),
      "notebook.focusedCellBackground": color_map("notebook.focusedCellBackground"),
      "notebook.focusedCellBorder": color_map("notebook.focusedCellBorder"),
      "notebook.focusedEditorBorder": color_map("notebook.focusedEditorBorder"),
      "notebook.inactiveFocusedCellBorder": color_map("notebook.inactiveFocusedCellBorder"),
      "notebook.inactiveSelectedCellBorder": color_map("notebook.inactiveSelectedCellBorder"),
      "notebook.outputContainerBackgroundColor": color_map("notebook.outputContainerBackgroundColor"),
      "notebook.outputContainerBorderColor": color_map("notebook.outputContainerBorderColor"),
      "notebook.selectedCellBackground": color_map("notebook.selectedCellBackground"),
      "notebook.selectedCellBorder": color_map("notebook.selectedCellBorder"),
      "notebook.symbolHighlightBackground": color_map("notebook.symbolHighlightBackground"),
      "notebookEditorOverviewRuler.runningCellForeground": color_map("notebookEditorOverviewRuler.runningCellForeground"),
      "notebookScrollbarSlider.activeBackground": color_map("notebookScrollbarSlider.activeBackground"),
      "notebookScrollbarSlider.background": color_map("notebookScrollbarSlider.background"),
      "notebookScrollbarSlider.hoverBackground": color_map("notebookScrollbarSlider.hoverBackground"),
      "notebookStatusErrorIcon.foreground": color_map("notebookStatusErrorIcon.foreground"),
      "notebookStatusRunningIcon.foreground": color_map("notebookStatusRunningIcon.foreground"),
      "notebookStatusSuccessIcon.foreground": color_map("notebookStatusSuccessIcon.foreground"),
      "notificationCenter.border": color_map("notificationCenter.border"),
      "notificationCenterHeader.background": color_map("notificationCenterHeader.background"),
      "notificationCenterHeader.foreground": color_map("notificationCenterHeader.foreground"),
      "notificationLink.foreground": color_map("notificationLink.foreground"),
      "notifications.background": color_map("notifications.background"),
      "notifications.border": color_map("notifications.border"),
      "notifications.foreground": color_map("notifications.foreground"),
      "notificationsErrorIcon.foreground": color_map("notificationsErrorIcon.foreground"),
      "notificationsInfoIcon.foreground": color_map("notificationsInfoIcon.foreground"),
      "notificationsWarningIcon.foreground": color_map("notificationsWarningIcon.foreground"),
      "notificationToast.border": color_map("notificationToast.border"),
      "outputView.background": color_map("outputView.background"),
      "outputViewStickyScroll.background": color_map("outputViewStickyScroll.background"),
      "panel.background": color_map("panel.background"),
      "panel.border": color_map("panel.border"),
      "panel.dropBorder": color_map("panel.dropBorder"),
      "panelInput.border": color_map("panelInput.border"),
      "panelSection.border": color_map("panelSection.border"),
      "panelSection.dropBackground": color_map("panelSection.dropBackground"),
      "panelSectionHeader.background": color_map("panelSectionHeader.background"),
      "panelSectionHeader.border": color_map("panelSectionHeader.border"),
      "panelSectionHeader.foreground": color_map("panelSectionHeader.foreground"),
      "panelStickyScroll.background": color_map("panelStickyScroll.background"),
      "panelStickyScroll.border": color_map("panelStickyScroll.border"),
      "panelStickyScroll.shadow": color_map("panelStickyScroll.shadow"),
      "panelTitle.activeBorder": color_map("panelTitle.activeBorder"),
      "panelTitle.activeForeground": color_map("panelTitle.activeForeground"),
      "panelTitle.border": color_map("panelTitle.border"),
      "panelTitle.inactiveForeground": color_map("panelTitle.inactiveForeground"),
      "peekView.border": color_map("peekView.border"),
      "peekViewEditor.background": color_map("peekViewEditor.background"),
      "peekViewEditor.matchHighlightBackground": color_map("peekViewEditor.matchHighlightBackground"),
      "peekViewEditor.matchHighlightBorder": color_map("peekViewEditor.matchHighlightBorder"),
      "peekViewEditorGutter.background": color_map("peekViewEditorGutter.background"),
      "peekViewEditorStickyScroll.background": color_map("peekViewEditorStickyScroll.background"),
      "peekViewResult.background": color_map("peekViewResult.background"),
      "peekViewResult.fileForeground": color_map("peekViewResult.fileForeground"),
      "peekViewResult.lineForeground": color_map("peekViewResult.lineForeground"),
      "peekViewResult.matchHighlightBackground": color_map("peekViewResult.matchHighlightBackground"),
      "peekViewResult.selectionBackground": color_map("peekViewResult.selectionBackground"),
      "peekViewResult.selectionForeground": color_map("peekViewResult.selectionForeground"),
      "peekViewTitle.background": color_map("peekViewTitle.background"),
      "peekViewTitleDescription.foreground": color_map("peekViewTitleDescription.foreground"),
      "peekViewTitleLabel.foreground": color_map("peekViewTitleLabel.foreground"),
      "pickerGroup.border": color_map("pickerGroup.border"),
      "pickerGroup.foreground": color_map("pickerGroup.foreground"),
      "ports.iconRunningProcessForeground": color_map("ports.iconRunningProcessForeground"),
      "problemsErrorIcon.foreground": color_map("problemsErrorIcon.foreground"),
      "problemsInfoIcon.foreground": color_map("problemsInfoIcon.foreground"),
      "problemsWarningIcon.foreground": color_map("problemsWarningIcon.foreground"),
      "profileBadge.background": color_map("profileBadge.background"),
      "profileBadge.foreground": color_map("profileBadge.foreground"),
      "profiles.sashBorder": color_map("profiles.sashBorder"),
      "progressBar.background": color_map("progressBar.background"),
      "pullRequests.closed": color_map("pullRequests.closed"),
      "pullRequests.draft": color_map("pullRequests.draft"),
      "pullRequests.merged": color_map("pullRequests.merged"),
      "pullRequests.notification": color_map("pullRequests.notification"),
      "pullRequests.open": color_map("pullRequests.open"),
      "quickInput.background": color_map("quickInput.background"),
      "quickInput.foreground": color_map("quickInput.foreground"),
      "quickInput.list.focusBackground": color_map("quickInput.list.focusBackground"),
      "quickInputList.focusBackground": color_map("quickInputList.focusBackground"),
      "quickInputList.focusForeground": color_map("quickInputList.focusForeground"),
      "quickInputList.focusIconForeground": color_map("quickInputList.focusIconForeground"),
      "quickInputTitle.background": color_map("quickInputTitle.background"),
      "radio.activeBackground": color_map("radio.activeBackground"),
      "radio.activeBorder": color_map("radio.activeBorder"),
      "radio.activeForeground": color_map("radio.activeForeground"),
      "radio.inactiveBackground": color_map("radio.inactiveBackground"),
      "radio.inactiveBorder": color_map("radio.inactiveBorder"),
      "radio.inactiveForeground": color_map("radio.inactiveForeground"),
      "radio.inactiveHoverBackground": color_map("radio.inactiveHoverBackground"),
      "sash.hoverBorder": color_map("sash.hoverBorder"),
      "scmGraph.foreground1": color_map("scmGraph.foreground1"),
      "scmGraph.foreground2": color_map("scmGraph.foreground2"),
      "scmGraph.foreground3": color_map("scmGraph.foreground3"),
      "scmGraph.foreground4": color_map("scmGraph.foreground4"),
      "scmGraph.foreground5": color_map("scmGraph.foreground5"),
      "scmGraph.historyItemBaseRefColor": color_map("scmGraph.historyItemBaseRefColor"),
      "scmGraph.historyItemHoverAdditionsForeground": color_map("scmGraph.historyItemHoverAdditionsForeground"),
      "scmGraph.historyItemHoverDefaultLabelBackground": color_map("scmGraph.historyItemHoverDefaultLabelBackground"),
      "scmGraph.historyItemHoverDefaultLabelForeground": color_map("scmGraph.historyItemHoverDefaultLabelForeground"),
      "scmGraph.historyItemHoverDeletionsForeground": color_map("scmGraph.historyItemHoverDeletionsForeground"),
      "scmGraph.historyItemHoverLabelForeground": color_map("scmGraph.historyItemHoverLabelForeground"),
      "scmGraph.historyItemRefColor": color_map("scmGraph.historyItemRefColor"),
      "scmGraph.historyItemRemoteRefColor": color_map("scmGraph.historyItemRemoteRefColor"),
      "scrollbar.shadow": color_map("scrollbar.shadow"),
      "scrollbarSlider.activeBackground": color_map("scrollbarSlider.activeBackground"),
      "scrollbarSlider.background": color_map("scrollbarSlider.background"),
      "scrollbarSlider.hoverBackground": color_map("scrollbarSlider.hoverBackground"),
      "search.resultsInfoForeground": color_map("search.resultsInfoForeground"),
      "searchEditor.findMatchBackground": color_map("searchEditor.findMatchBackground"),
      "searchEditor.findMatchBorder": color_map("searchEditor.findMatchBorder"),
      "searchEditor.textInputBorder": color_map("searchEditor.textInputBorder"),
      "selection.background": color_map("selection.background"),
      "settings.checkboxBackground": color_map("settings.checkboxBackground"),
      "settings.checkboxBorder": color_map("settings.checkboxBorder"),
      "settings.checkboxForeground": color_map("settings.checkboxForeground"),
      "settings.dropdownBackground": color_map("settings.dropdownBackground"),
      "settings.dropdownBorder": color_map("settings.dropdownBorder"),
      "settings.dropdownForeground": color_map("settings.dropdownForeground"),
      "settings.dropdownListBorder": color_map("settings.dropdownListBorder"),
      "settings.focusedRowBackground": color_map("settings.focusedRowBackground"),
      "settings.focusedRowBorder": color_map("settings.focusedRowBorder"),
      "settings.headerBorder": color_map("settings.headerBorder"),
      "settings.headerForeground": color_map("settings.headerForeground"),
      "settings.modifiedItemIndicator": color_map("settings.modifiedItemIndicator"),
      "settings.numberInputBackground": color_map("settings.numberInputBackground"),
      "settings.numberInputBorder": color_map("settings.numberInputBorder"),
      "settings.numberInputForeground": color_map("settings.numberInputForeground"),
      "settings.rowHoverBackground": color_map("settings.rowHoverBackground"),
      "settings.sashBorder": color_map("settings.sashBorder"),
      "settings.settingsHeaderHoverForeground": color_map("settings.settingsHeaderHoverForeground"),
      "settings.textInputBackground": color_map("settings.textInputBackground"),
      "settings.textInputBorder": color_map("settings.textInputBorder"),
      "settings.textInputForeground": color_map("settings.textInputForeground"),
      "sideBar.background": color_map("sideBar.background"),
      "sideBar.border": color_map("sideBar.border"),
      "sideBar.dropBackground": color_map("sideBar.dropBackground"),
      "sideBar.foreground": color_map("sideBar.foreground"),
      "sideBarActivityBarTop.border": color_map("sideBarActivityBarTop.border"),
      "sideBarSectionHeader.background": color_map("sideBarSectionHeader.background"),
      "sideBarSectionHeader.border": color_map("sideBarSectionHeader.border"),
      "sideBarSectionHeader.foreground": color_map("sideBarSectionHeader.foreground"),
      "sideBarStickyScroll.background": color_map("sideBarStickyScroll.background"),
      "sideBarStickyScroll.border": color_map("sideBarStickyScroll.border"),
      "sideBarStickyScroll.shadow": color_map("sideBarStickyScroll.shadow"),
      "sideBarTitle.background": color_map("sideBarTitle.background"),
      "sideBarTitle.border": color_map("sideBarTitle.border"),
      "sideBarTitle.foreground": color_map("sideBarTitle.foreground"),
      "sideBySideEditor.horizontalBorder": color_map("sideBySideEditor.horizontalBorder"),
      "sideBySideEditor.verticalBorder": color_map("sideBySideEditor.verticalBorder"),
      "simpleFindWidget.sashBorder": color_map("simpleFindWidget.sashBorder"),
      "statusBar.background": color_map("statusBar.background"),
      "statusBar.border": color_map("statusBar.border"),
      "statusBar.debuggingBackground": color_map("statusBar.debuggingBackground"),
      "statusBar.debuggingBorder": color_map("statusBar.debuggingBorder"),
      "statusBar.debuggingForeground": color_map("statusBar.debuggingForeground"),
      "statusBar.focusBorder": color_map("statusBar.focusBorder"),
      "statusBar.foreground": color_map("statusBar.foreground"),
      "statusBar.noFolderBackground": color_map("statusBar.noFolderBackground"),
      "statusBar.noFolderBorder": color_map("statusBar.noFolderBorder"),
      "statusBar.noFolderForeground": color_map("statusBar.noFolderForeground"),
      "statusBarItem.activeBackground": color_map("statusBarItem.activeBackground"),
      "statusBarItem.compactHoverBackground": color_map("statusBarItem.compactHoverBackground"),
      "statusBarItem.errorBackground": color_map("statusBarItem.errorBackground"),
      "statusBarItem.errorForeground": color_map("statusBarItem.errorForeground"),
      "statusBarItem.errorHoverBackground": color_map("statusBarItem.errorHoverBackground"),
      "statusBarItem.errorHoverForeground": color_map("statusBarItem.errorHoverForeground"),
      "statusBarItem.focusBorder": color_map("statusBarItem.focusBorder"),
      "statusBarItem.hoverBackground": color_map("statusBarItem.hoverBackground"),
      "statusBarItem.hoverForeground": color_map("statusBarItem.hoverForeground"),
      "statusBarItem.offlineBackground": color_map("statusBarItem.offlineBackground"),
      "statusBarItem.offlineForeground": color_map("statusBarItem.offlineForeground"),
      "statusBarItem.offlineHoverBackground": color_map("statusBarItem.offlineHoverBackground"),
      "statusBarItem.offlineHoverForeground": color_map("statusBarItem.offlineHoverForeground"),
      "statusBarItem.prominentBackground": color_map("statusBarItem.prominentBackground"),
      "statusBarItem.prominentForeground": color_map("statusBarItem.prominentForeground"),
      "statusBarItem.prominentHoverBackground": color_map("statusBarItem.prominentHoverBackground"),
      "statusBarItem.prominentHoverForeground": color_map("statusBarItem.prominentHoverForeground"),
      "statusBarItem.remoteBackground": color_map("statusBarItem.remoteBackground"),
      "statusBarItem.remoteForeground": color_map("statusBarItem.remoteForeground"),
      "statusBarItem.remoteHoverBackground": color_map("statusBarItem.remoteHoverBackground"),
      "statusBarItem.remoteHoverForeground": color_map("statusBarItem.remoteHoverForeground"),
      "statusBarItem.warningBackground": color_map("statusBarItem.warningBackground"),
      "statusBarItem.warningForeground": color_map("statusBarItem.warningForeground"),
      "statusBarItem.warningHoverBackground": color_map("statusBarItem.warningHoverBackground"),
      "statusBarItem.warningHoverForeground": color_map("statusBarItem.warningHoverForeground"),
      "symbolIcon.arrayForeground": color_map("symbolIcon.arrayForeground"),
      "symbolIcon.booleanForeground": color_map("symbolIcon.booleanForeground"),
      "symbolIcon.classForeground": color_map("symbolIcon.classForeground"),
      "symbolIcon.colorForeground": color_map("symbolIcon.colorForeground"),
      "symbolIcon.constantForeground": color_map("symbolIcon.constantForeground"),
      "symbolIcon.constructorForeground": color_map("symbolIcon.constructorForeground"),
      "symbolIcon.enumeratorForeground": color_map("symbolIcon.enumeratorForeground"),
      "symbolIcon.enumeratorMemberForeground": color_map("symbolIcon.enumeratorMemberForeground"),
      "symbolIcon.eventForeground": color_map("symbolIcon.eventForeground"),
      "symbolIcon.fieldForeground": color_map("symbolIcon.fieldForeground"),
      "symbolIcon.fileForeground": color_map("symbolIcon.fileForeground"),
      "symbolIcon.folderForeground": color_map("symbolIcon.folderForeground"),
      "symbolIcon.functionForeground": color_map("symbolIcon.functionForeground"),
      "symbolIcon.interfaceForeground": color_map("symbolIcon.interfaceForeground"),
      "symbolIcon.keyForeground": color_map("symbolIcon.keyForeground"),
      "symbolIcon.keywordForeground": color_map("symbolIcon.keywordForeground"),
      "symbolIcon.methodForeground": color_map("symbolIcon.methodForeground"),
      "symbolIcon.moduleForeground": color_map("symbolIcon.moduleForeground"),
      "symbolIcon.namespaceForeground": color_map("symbolIcon.namespaceForeground"),
      "symbolIcon.nullForeground": color_map("symbolIcon.nullForeground"),
      "symbolIcon.numberForeground": color_map("symbolIcon.numberForeground"),
      "symbolIcon.objectForeground": color_map("symbolIcon.objectForeground"),
      "symbolIcon.operatorForeground": color_map("symbolIcon.operatorForeground"),
      "symbolIcon.packageForeground": color_map("symbolIcon.packageForeground"),
      "symbolIcon.propertyForeground": color_map("symbolIcon.propertyForeground"),
      "symbolIcon.referenceForeground": color_map("symbolIcon.referenceForeground"),
      "symbolIcon.snippetForeground": color_map("symbolIcon.snippetForeground"),
      "symbolIcon.stringForeground": color_map("symbolIcon.stringForeground"),
      "symbolIcon.structForeground": color_map("symbolIcon.structForeground"),
      "symbolIcon.textForeground": color_map("symbolIcon.textForeground"),
      "symbolIcon.typeParameterForeground": color_map("symbolIcon.typeParameterForeground"),
      "symbolIcon.unitForeground": color_map("symbolIcon.unitForeground"),
      "symbolIcon.variableForeground": color_map("symbolIcon.variableForeground"),
      "tab.activeBackground": color_map("tab.activeBackground"),
      "tab.activeBorder": color_map("tab.activeBorder"),
      "tab.activeBorderTop": color_map("tab.activeBorderTop"),
      "tab.activeForeground": color_map("tab.activeForeground"),
      "tab.activeModifiedBorder": color_map("tab.activeModifiedBorder"),
      "tab.border": color_map("tab.border"),
      "tab.dragAndDropBorder": color_map("tab.dragAndDropBorder"),
      "tab.hoverBackground": color_map("tab.hoverBackground"),
      "tab.hoverBorder": color_map("tab.hoverBorder"),
      "tab.hoverForeground": color_map("tab.hoverForeground"),
      "tab.inactiveBackground": color_map("tab.inactiveBackground"),
      "tab.inactiveForeground": color_map("tab.inactiveForeground"),
      "tab.inactiveModifiedBorder": color_map("tab.inactiveModifiedBorder"),
      "tab.lastPinnedBorder": color_map("tab.lastPinnedBorder"),
      "tab.selectedBackground": color_map("tab.selectedBackground"),
      "tab.selectedBorderTop": color_map("tab.selectedBorderTop"),
      "tab.selectedForeground": color_map("tab.selectedForeground"),
      "tab.unfocusedActiveBackground": color_map("tab.unfocusedActiveBackground"),
      "tab.unfocusedActiveBorder": color_map("tab.unfocusedActiveBorder"),
      "tab.unfocusedActiveBorderTop": color_map("tab.unfocusedActiveBorderTop"),
      "tab.unfocusedActiveForeground": color_map("tab.unfocusedActiveForeground"),
      "tab.unfocusedActiveModifiedBorder": color_map("tab.unfocusedActiveModifiedBorder"),
      "tab.unfocusedHoverBackground": color_map("tab.unfocusedHoverBackground"),
      "tab.unfocusedHoverBorder": color_map("tab.unfocusedHoverBorder"),
      "tab.unfocusedHoverForeground": color_map("tab.unfocusedHoverForeground"),
      "tab.unfocusedInactiveBackground": color_map("tab.unfocusedInactiveBackground"),
      "tab.unfocusedInactiveForeground": color_map("tab.unfocusedInactiveForeground"),
      "tab.unfocusedInactiveModifiedBorder": color_map("tab.unfocusedInactiveModifiedBorder"),
      "terminal.ansiBlack": color_map("terminal.ansiBlack"),
      "terminal.ansiBlue": color_map("terminal.ansiBlue"),
      "terminal.ansiBrightBlack": color_map("terminal.ansiBrightBlack"),
      "terminal.ansiBrightBlue": color_map("terminal.ansiBrightBlue"),
      "terminal.ansiBrightCyan": color_map("terminal.ansiBrightCyan"),
      "terminal.ansiBrightGreen": color_map("terminal.ansiBrightGreen"),
      "terminal.ansiBrightMagenta": color_map("terminal.ansiBrightMagenta"),
      "terminal.ansiBrightRed": color_map("terminal.ansiBrightRed"),
      "terminal.ansiBrightWhite": color_map("terminal.ansiBrightWhite"),
      "terminal.ansiBrightYellow": color_map("terminal.ansiBrightYellow"),
      "terminal.ansiCyan": color_map("terminal.ansiCyan"),
      "terminal.ansiGreen": color_map("terminal.ansiGreen"),
      "terminal.ansiMagenta": color_map("terminal.ansiMagenta"),
      "terminal.ansiRed": color_map("terminal.ansiRed"),
      "terminal.ansiWhite": color_map("terminal.ansiWhite"),
      "terminal.ansiYellow": color_map("terminal.ansiYellow"),
      "terminal.background": color_map("terminal.background"),
      "terminal.border": color_map("terminal.border"),
      "terminal.dropBackground": color_map("terminal.dropBackground"),
      "terminal.findMatchBackground": color_map("terminal.findMatchBackground"),
      "terminal.findMatchBorder": color_map("terminal.findMatchBorder"),
      "terminal.findMatchHighlightBackground": color_map("terminal.findMatchHighlightBackground"),
      "terminal.findMatchHighlightBorder": color_map("terminal.findMatchHighlightBorder"),
      "terminal.foreground": color_map("terminal.foreground"),
      "terminal.hoverHighlightBackground": color_map("terminal.hoverHighlightBackground"),
      "terminal.inactiveSelectionBackground": color_map("terminal.inactiveSelectionBackground"),
      "terminal.initialHintForeground": color_map("terminal.initialHintForeground"),
      "terminal.selectionBackground": color_map("terminal.selectionBackground"),
      "terminal.selectionForeground": color_map("terminal.selectionForeground"),
      "terminal.tab.activeBorder": color_map("terminal.tab.activeBorder"),
      "terminalCommandDecoration.defaultBackground": color_map("terminalCommandDecoration.defaultBackground"),
      "terminalCommandDecoration.errorBackground": color_map("terminalCommandDecoration.errorBackground"),
      "terminalCommandDecoration.successBackground": color_map("terminalCommandDecoration.successBackground"),
      "terminalCommandGuide.foreground": color_map("terminalCommandGuide.foreground"),
      "terminalCursor.background": color_map("terminalCursor.background"),
      "terminalCursor.foreground": color_map("terminalCursor.foreground"),
      "terminalOverviewRuler.border": color_map("terminalOverviewRuler.border"),
      "terminalOverviewRuler.cursorForeground": color_map("terminalOverviewRuler.cursorForeground"),
      "terminalOverviewRuler.findMatchForeground": color_map("terminalOverviewRuler.findMatchForeground"),
      "terminalStickyScroll.background": color_map("terminalStickyScroll.background"),
      "terminalStickyScroll.border": color_map("terminalStickyScroll.border"),
      "terminalStickyScrollHover.background": color_map("terminalStickyScrollHover.background"),
      "testing.coverCountBadgeBackground": color_map("testing.coverCountBadgeBackground"),
      "testing.coverCountBadgeForeground": color_map("testing.coverCountBadgeForeground"),
      "testing.coveredBackground": color_map("testing.coveredBackground"),
      "testing.coveredBorder": color_map("testing.coveredBorder"),
      "testing.coveredGutterBackground": color_map("testing.coveredGutterBackground"),
      "testing.iconErrored.retired": color_map("testing.iconErrored.retired"),
      "testing.iconErrored": color_map("testing.iconErrored"),
      "testing.iconFailed.retired": color_map("testing.iconFailed.retired"),
      "testing.iconFailed": color_map("testing.iconFailed"),
      "testing.iconPassed.retired": color_map("testing.iconPassed.retired"),
      "testing.iconPassed": color_map("testing.iconPassed"),
      "testing.iconQueued.retired": color_map("testing.iconQueued.retired"),
      "testing.iconQueued": color_map("testing.iconQueued"),
      "testing.iconSkipped.retired": color_map("testing.iconSkipped.retired"),
      "testing.iconSkipped": color_map("testing.iconSkipped"),
      "testing.iconUnset.retired": color_map("testing.iconUnset.retired"),
      "testing.iconUnset": color_map("testing.iconUnset"),
      "testing.message.error.badgeBackground": color_map("testing.message.error.badgeBackground"),
      "testing.message.error.badgeBorder": color_map("testing.message.error.badgeBorder"),
      "testing.message.error.badgeForeground": color_map("testing.message.error.badgeForeground"),
      "testing.message.error.lineBackground": color_map("testing.message.error.lineBackground"),
      "testing.message.info.decorationForeground": color_map("testing.message.info.decorationForeground"),
      "testing.message.info.lineBackground": color_map("testing.message.info.lineBackground"),
      "testing.messagePeekBorder": color_map("testing.messagePeekBorder"),
      "testing.messagePeekHeaderBackground": color_map("testing.messagePeekHeaderBackground"),
      "testing.peekBorder": color_map("testing.peekBorder"),
      "testing.peekHeaderBackground": color_map("testing.peekHeaderBackground"),
      "testing.runAction": color_map("testing.runAction"),
      "testing.uncoveredBackground": color_map("testing.uncoveredBackground"),
      "testing.uncoveredBorder": color_map("testing.uncoveredBorder"),
      "testing.uncoveredBranchBackground": color_map("testing.uncoveredBranchBackground"),
      "testing.uncoveredGutterBackground": color_map("testing.uncoveredGutterBackground"),
      "textBlockQuote.background": color_map("textBlockQuote.background"),
      "textBlockQuote.border": color_map("textBlockQuote.border"),
      "textCodeBlock.background": color_map("textCodeBlock.background"),
      "textLink.activeForeground": color_map("textLink.activeForeground"),
      "textLink.foreground": color_map("textLink.foreground"),
      "textPreformat.background": color_map("textPreformat.background"),
      "textPreformat.foreground": color_map("textPreformat.foreground"),
      "textSeparator.foreground": color_map("textSeparator.foreground"),
      "titleBar.activeBackground": color_map("titleBar.activeBackground"),
      "titleBar.activeForeground": color_map("titleBar.activeForeground"),
      "titleBar.border": color_map("titleBar.border"),
      "titleBar.inactiveBackground": color_map("titleBar.inactiveBackground"),
      "titleBar.inactiveForeground": color_map("titleBar.inactiveForeground"),
      "toolbar.activeBackground": color_map("toolbar.activeBackground"),
      "toolbar.hoverBackground": color_map("toolbar.hoverBackground"),
      "toolbar.hoverOutline": color_map("toolbar.hoverOutline"),
      "tree.inactiveIndentGuidesStroke": color_map("tree.inactiveIndentGuidesStroke"),
      "tree.indentGuidesStroke": color_map("tree.indentGuidesStroke"),
      "tree.tableColumnsBorder": color_map("tree.tableColumnsBorder"),
      "tree.tableOddRowsBackground": color_map("tree.tableOddRowsBackground"),
      "walkThrough.embeddedEditorBackground": color_map("walkThrough.embeddedEditorBackground"),
      "walkthrough.stepTitle.foreground": color_map("walkthrough.stepTitle.foreground"),
      "welcomePage.background": color_map("welcomePage.background"),
      "welcomePage.progress.background": color_map("welcomePage.progress.background"),
      "welcomePage.progress.foreground": color_map("welcomePage.progress.foreground"),
      "welcomePage.tileBackground": color_map("welcomePage.tileBackground"),
      "welcomePage.tileBorder": color_map("welcomePage.tileBorder"),
      "welcomePage.tileHoverBackground": color_map("welcomePage.tileHoverBackground"),
      "widget.border": color_map("widget.border"),
      "widget.shadow": color_map("widget.shadow"),
      "window.activeBorder": color_map("window.activeBorder"),
      "window.inactiveBorder": color_map("window.inactiveBorder"),
      //"contrastActiveBorder": cmap("contrastActiveBorder"),
      //"contrastBorder": cmap("contrastBorder"),
    },
    tokenColors: [
      {
        scope: ["comment"],
        settings: {
          foreground: medium_transparency_foreground,
        },
      },
      {
        scope: ["keyword", "storage"],
        settings: {
          foreground: low_transparency_foreground,
        },
      },
      {
        scope: ["entity", "strong"],
        settings: {
          fontStyle: "bold",
        },
      },
      {
        scope: ["invalid"],
        settings: {
          foreground: low_transparency_foreground,
          fontStyle: "italic underline",
        },
      },
    ],
    "semanticHighlighting": false,
    "semanticTokenColors": {
    }
  };
};

module.exports = {
  opaque,
  opaqueRgb,
  rgbaArrayToStr,
  rgbaStrToArray,
  crtTemplate,
};
